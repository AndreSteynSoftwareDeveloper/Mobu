//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MobuAndroid.MobuWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMobuWs", Namespace="http://tempuri.org/")]
    public partial class MobuWs : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadNextFragmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckForActiveUploadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback TogglePackageCriticalStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckForActiveDownloadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelActiveDownloadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextFragmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePackageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MobuWs() {
            this.Url = "http://127.0.0.1/MobuWcf/MobuWs.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestWebServiceCompletedEventHandler TestWebServiceCompleted;
        
        /// <remarks/>
        public event StartUploadCompletedEventHandler StartUploadCompleted;
        
        /// <remarks/>
        public event UploadNextFragmentCompletedEventHandler UploadNextFragmentCompleted;
        
        /// <remarks/>
        public event CheckForActiveUploadsCompletedEventHandler CheckForActiveUploadsCompleted;
        
        /// <remarks/>
        public event CancelUploadCompletedEventHandler CancelUploadCompleted;
        
        /// <remarks/>
        public event FinishUploadCompletedEventHandler FinishUploadCompleted;
        
        /// <remarks/>
        public event TogglePackageCriticalStateCompletedEventHandler TogglePackageCriticalStateCompleted;
        
        /// <remarks/>
        public event CheckForActiveDownloadsCompletedEventHandler CheckForActiveDownloadsCompleted;
        
        /// <remarks/>
        public event CancelActiveDownloadsCompletedEventHandler CancelActiveDownloadsCompleted;
        
        /// <remarks/>
        public event StartDownloadCompletedEventHandler StartDownloadCompleted;
        
        /// <remarks/>
        public event GetNextFragmentCompletedEventHandler GetNextFragmentCompleted;
        
        /// <remarks/>
        public event FinishDownloadCompletedEventHandler FinishDownloadCompleted;
        
        /// <remarks/>
        public event GetPackageListCompletedEventHandler GetPackageListCompleted;
        
        /// <remarks/>
        public event RemovePackageCompletedEventHandler RemovePackageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/TestWebService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TestWebService(out bool TestWebServiceResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TestWebServiceResultSpecified) {
            object[] results = this.Invoke("TestWebService", new object[0]);
            TestWebServiceResult = ((bool)(results[0]));
            TestWebServiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void TestWebServiceAsync() {
            this.TestWebServiceAsync(null);
        }
        
        /// <remarks/>
        public void TestWebServiceAsync(object userState) {
            if ((this.TestWebServiceOperationCompleted == null)) {
                this.TestWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestWebServiceOperationCompleted);
            }
            this.InvokeAsync("TestWebService", new object[0], this.TestWebServiceOperationCompleted, userState);
        }
        
        private void OnTestWebServiceOperationCompleted(object arg) {
            if ((this.TestWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestWebServiceCompleted(this, new TestWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/StartUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, int packageSize, [System.Xml.Serialization.XmlIgnoreAttribute()] bool packageSizeSpecified, int fragmentSize, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fragmentSizeSpecified, out bool StartUploadResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool StartUploadResultSpecified) {
            object[] results = this.Invoke("StartUpload", new object[] {
                        packageDetails,
                        packageSize,
                        packageSizeSpecified,
                        fragmentSize,
                        fragmentSizeSpecified});
            StartUploadResult = ((bool)(results[0]));
            StartUploadResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void StartUploadAsync(PackageDetails packageDetails, int packageSize, bool packageSizeSpecified, int fragmentSize, bool fragmentSizeSpecified) {
            this.StartUploadAsync(packageDetails, packageSize, packageSizeSpecified, fragmentSize, fragmentSizeSpecified, null);
        }
        
        /// <remarks/>
        public void StartUploadAsync(PackageDetails packageDetails, int packageSize, bool packageSizeSpecified, int fragmentSize, bool fragmentSizeSpecified, object userState) {
            if ((this.StartUploadOperationCompleted == null)) {
                this.StartUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartUploadOperationCompleted);
            }
            this.InvokeAsync("StartUpload", new object[] {
                        packageDetails,
                        packageSize,
                        packageSizeSpecified,
                        fragmentSize,
                        fragmentSizeSpecified}, this.StartUploadOperationCompleted, userState);
        }
        
        private void OnStartUploadOperationCompleted(object arg) {
            if ((this.StartUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartUploadCompleted(this, new StartUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/UploadNextFragment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadNextFragment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Fragment fragment, out bool UploadNextFragmentResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UploadNextFragmentResultSpecified) {
            object[] results = this.Invoke("UploadNextFragment", new object[] {
                        fragment});
            UploadNextFragmentResult = ((bool)(results[0]));
            UploadNextFragmentResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UploadNextFragmentAsync(Fragment fragment) {
            this.UploadNextFragmentAsync(fragment, null);
        }
        
        /// <remarks/>
        public void UploadNextFragmentAsync(Fragment fragment, object userState) {
            if ((this.UploadNextFragmentOperationCompleted == null)) {
                this.UploadNextFragmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadNextFragmentOperationCompleted);
            }
            this.InvokeAsync("UploadNextFragment", new object[] {
                        fragment}, this.UploadNextFragmentOperationCompleted, userState);
        }
        
        private void OnUploadNextFragmentOperationCompleted(object arg) {
            if ((this.UploadNextFragmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadNextFragmentCompleted(this, new UploadNextFragmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/CheckForActiveUploads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckForActiveUploads([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out bool CheckForActiveUploadsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckForActiveUploadsResultSpecified) {
            object[] results = this.Invoke("CheckForActiveUploads", new object[] {
                        packageDetails});
            CheckForActiveUploadsResult = ((bool)(results[0]));
            CheckForActiveUploadsResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CheckForActiveUploadsAsync(PackageDetails packageDetails) {
            this.CheckForActiveUploadsAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void CheckForActiveUploadsAsync(PackageDetails packageDetails, object userState) {
            if ((this.CheckForActiveUploadsOperationCompleted == null)) {
                this.CheckForActiveUploadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckForActiveUploadsOperationCompleted);
            }
            this.InvokeAsync("CheckForActiveUploads", new object[] {
                        packageDetails}, this.CheckForActiveUploadsOperationCompleted, userState);
        }
        
        private void OnCheckForActiveUploadsOperationCompleted(object arg) {
            if ((this.CheckForActiveUploadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckForActiveUploadsCompleted(this, new CheckForActiveUploadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/CancelUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out bool CancelUploadResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CancelUploadResultSpecified) {
            object[] results = this.Invoke("CancelUpload", new object[] {
                        packageDetails});
            CancelUploadResult = ((bool)(results[0]));
            CancelUploadResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CancelUploadAsync(PackageDetails packageDetails) {
            this.CancelUploadAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void CancelUploadAsync(PackageDetails packageDetails, object userState) {
            if ((this.CancelUploadOperationCompleted == null)) {
                this.CancelUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelUploadOperationCompleted);
            }
            this.InvokeAsync("CancelUpload", new object[] {
                        packageDetails}, this.CancelUploadOperationCompleted, userState);
        }
        
        private void OnCancelUploadOperationCompleted(object arg) {
            if ((this.CancelUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelUploadCompleted(this, new CancelUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/FinishUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FinishUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out bool FinishUploadResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool FinishUploadResultSpecified) {
            object[] results = this.Invoke("FinishUpload", new object[] {
                        packageDetails});
            FinishUploadResult = ((bool)(results[0]));
            FinishUploadResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void FinishUploadAsync(PackageDetails packageDetails) {
            this.FinishUploadAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void FinishUploadAsync(PackageDetails packageDetails, object userState) {
            if ((this.FinishUploadOperationCompleted == null)) {
                this.FinishUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishUploadOperationCompleted);
            }
            this.InvokeAsync("FinishUpload", new object[] {
                        packageDetails}, this.FinishUploadOperationCompleted, userState);
        }
        
        private void OnFinishUploadOperationCompleted(object arg) {
            if ((this.FinishUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishUploadCompleted(this, new FinishUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/TogglePackageCriticalState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TogglePackageCriticalState([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out bool TogglePackageCriticalStateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TogglePackageCriticalStateResultSpecified) {
            object[] results = this.Invoke("TogglePackageCriticalState", new object[] {
                        packageDetails});
            TogglePackageCriticalStateResult = ((bool)(results[0]));
            TogglePackageCriticalStateResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void TogglePackageCriticalStateAsync(PackageDetails packageDetails) {
            this.TogglePackageCriticalStateAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void TogglePackageCriticalStateAsync(PackageDetails packageDetails, object userState) {
            if ((this.TogglePackageCriticalStateOperationCompleted == null)) {
                this.TogglePackageCriticalStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTogglePackageCriticalStateOperationCompleted);
            }
            this.InvokeAsync("TogglePackageCriticalState", new object[] {
                        packageDetails}, this.TogglePackageCriticalStateOperationCompleted, userState);
        }
        
        private void OnTogglePackageCriticalStateOperationCompleted(object arg) {
            if ((this.TogglePackageCriticalStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TogglePackageCriticalStateCompleted(this, new TogglePackageCriticalStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/CheckForActiveDownloads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckForActiveDownloads([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out int CheckForActiveDownloadsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckForActiveDownloadsResultSpecified) {
            object[] results = this.Invoke("CheckForActiveDownloads", new object[] {
                        packageDetails});
            CheckForActiveDownloadsResult = ((int)(results[0]));
            CheckForActiveDownloadsResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CheckForActiveDownloadsAsync(PackageDetails packageDetails) {
            this.CheckForActiveDownloadsAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void CheckForActiveDownloadsAsync(PackageDetails packageDetails, object userState) {
            if ((this.CheckForActiveDownloadsOperationCompleted == null)) {
                this.CheckForActiveDownloadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckForActiveDownloadsOperationCompleted);
            }
            this.InvokeAsync("CheckForActiveDownloads", new object[] {
                        packageDetails}, this.CheckForActiveDownloadsOperationCompleted, userState);
        }
        
        private void OnCheckForActiveDownloadsOperationCompleted(object arg) {
            if ((this.CheckForActiveDownloadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckForActiveDownloadsCompleted(this, new CheckForActiveDownloadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/CancelActiveDownloads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelActiveDownloads([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out bool CancelActiveDownloadsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CancelActiveDownloadsResultSpecified) {
            object[] results = this.Invoke("CancelActiveDownloads", new object[] {
                        packageDetails});
            CancelActiveDownloadsResult = ((bool)(results[0]));
            CancelActiveDownloadsResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CancelActiveDownloadsAsync(PackageDetails packageDetails) {
            this.CancelActiveDownloadsAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void CancelActiveDownloadsAsync(PackageDetails packageDetails, object userState) {
            if ((this.CancelActiveDownloadsOperationCompleted == null)) {
                this.CancelActiveDownloadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelActiveDownloadsOperationCompleted);
            }
            this.InvokeAsync("CancelActiveDownloads", new object[] {
                        packageDetails}, this.CancelActiveDownloadsOperationCompleted, userState);
        }
        
        private void OnCancelActiveDownloadsOperationCompleted(object arg) {
            if ((this.CancelActiveDownloadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelActiveDownloadsCompleted(this, new CancelActiveDownloadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/StartDownload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartDownload([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, int fragmentSize, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fragmentSizeSpecified, out int StartDownloadResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool StartDownloadResultSpecified) {
            object[] results = this.Invoke("StartDownload", new object[] {
                        packageDetails,
                        fragmentSize,
                        fragmentSizeSpecified});
            StartDownloadResult = ((int)(results[0]));
            StartDownloadResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void StartDownloadAsync(PackageDetails packageDetails, int fragmentSize, bool fragmentSizeSpecified) {
            this.StartDownloadAsync(packageDetails, fragmentSize, fragmentSizeSpecified, null);
        }
        
        /// <remarks/>
        public void StartDownloadAsync(PackageDetails packageDetails, int fragmentSize, bool fragmentSizeSpecified, object userState) {
            if ((this.StartDownloadOperationCompleted == null)) {
                this.StartDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartDownloadOperationCompleted);
            }
            this.InvokeAsync("StartDownload", new object[] {
                        packageDetails,
                        fragmentSize,
                        fragmentSizeSpecified}, this.StartDownloadOperationCompleted, userState);
        }
        
        private void OnStartDownloadOperationCompleted(object arg) {
            if ((this.StartDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartDownloadCompleted(this, new StartDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/GetNextFragment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Fragment GetNextFragment([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, int index, [System.Xml.Serialization.XmlIgnoreAttribute()] bool indexSpecified, int fragmentSize, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fragmentSizeSpecified) {
            object[] results = this.Invoke("GetNextFragment", new object[] {
                        packageDetails,
                        index,
                        indexSpecified,
                        fragmentSize,
                        fragmentSizeSpecified});
            return ((Fragment)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextFragmentAsync(PackageDetails packageDetails, int index, bool indexSpecified, int fragmentSize, bool fragmentSizeSpecified) {
            this.GetNextFragmentAsync(packageDetails, index, indexSpecified, fragmentSize, fragmentSizeSpecified, null);
        }
        
        /// <remarks/>
        public void GetNextFragmentAsync(PackageDetails packageDetails, int index, bool indexSpecified, int fragmentSize, bool fragmentSizeSpecified, object userState) {
            if ((this.GetNextFragmentOperationCompleted == null)) {
                this.GetNextFragmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextFragmentOperationCompleted);
            }
            this.InvokeAsync("GetNextFragment", new object[] {
                        packageDetails,
                        index,
                        indexSpecified,
                        fragmentSize,
                        fragmentSizeSpecified}, this.GetNextFragmentOperationCompleted, userState);
        }
        
        private void OnGetNextFragmentOperationCompleted(object arg) {
            if ((this.GetNextFragmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextFragmentCompleted(this, new GetNextFragmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/FinishDownload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FinishDownload([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, int fragmentSize, [System.Xml.Serialization.XmlIgnoreAttribute()] bool fragmentSizeSpecified, out bool FinishDownloadResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool FinishDownloadResultSpecified) {
            object[] results = this.Invoke("FinishDownload", new object[] {
                        packageDetails,
                        fragmentSize,
                        fragmentSizeSpecified});
            FinishDownloadResult = ((bool)(results[0]));
            FinishDownloadResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void FinishDownloadAsync(PackageDetails packageDetails, int fragmentSize, bool fragmentSizeSpecified) {
            this.FinishDownloadAsync(packageDetails, fragmentSize, fragmentSizeSpecified, null);
        }
        
        /// <remarks/>
        public void FinishDownloadAsync(PackageDetails packageDetails, int fragmentSize, bool fragmentSizeSpecified, object userState) {
            if ((this.FinishDownloadOperationCompleted == null)) {
                this.FinishDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishDownloadOperationCompleted);
            }
            this.InvokeAsync("FinishDownload", new object[] {
                        packageDetails,
                        fragmentSize,
                        fragmentSizeSpecified}, this.FinishDownloadOperationCompleted, userState);
        }
        
        private void OnFinishDownloadOperationCompleted(object arg) {
            if ((this.FinishDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishDownloadCompleted(this, new FinishDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/GetPackageList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MobuWcf")]
        public PackageDetails[] GetPackageList() {
            object[] results = this.Invoke("GetPackageList", new object[0]);
            return ((PackageDetails[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageListAsync() {
            this.GetPackageListAsync(null);
        }
        
        /// <remarks/>
        public void GetPackageListAsync(object userState) {
            if ((this.GetPackageListOperationCompleted == null)) {
                this.GetPackageListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageListOperationCompleted);
            }
            this.InvokeAsync("GetPackageList", new object[0], this.GetPackageListOperationCompleted, userState);
        }
        
        private void OnGetPackageListOperationCompleted(object arg) {
            if ((this.GetPackageListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageListCompleted(this, new GetPackageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMobuWs/RemovePackage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemovePackage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] PackageDetails packageDetails, out bool RemovePackageResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool RemovePackageResultSpecified) {
            object[] results = this.Invoke("RemovePackage", new object[] {
                        packageDetails});
            RemovePackageResult = ((bool)(results[0]));
            RemovePackageResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void RemovePackageAsync(PackageDetails packageDetails) {
            this.RemovePackageAsync(packageDetails, null);
        }
        
        /// <remarks/>
        public void RemovePackageAsync(PackageDetails packageDetails, object userState) {
            if ((this.RemovePackageOperationCompleted == null)) {
                this.RemovePackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePackageOperationCompleted);
            }
            this.InvokeAsync("RemovePackage", new object[] {
                        packageDetails}, this.RemovePackageOperationCompleted, userState);
        }
        
        private void OnRemovePackageOperationCompleted(object arg) {
            if ((this.RemovePackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePackageCompleted(this, new RemovePackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MobuWcf")]
    public partial class PackageDetails {
        
        private bool criticalField;
        
        private bool criticalFieldSpecified;
        
        private string nameField;
        
        private string versionField;
        
        /// <remarks/>
        public bool Critical {
            get {
                return this.criticalField;
            }
            set {
                this.criticalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CriticalSpecified {
            get {
                return this.criticalFieldSpecified;
            }
            set {
                this.criticalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MobuWcf.Models")]
    public partial class Fragment {
        
        private byte[] dataField;
        
        private int indexField;
        
        private bool indexFieldSpecified;
        
        private PackageDetails packageDetailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public PackageDetails PackageDetails {
            get {
                return this.packageDetailsField;
            }
            set {
                this.packageDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void TestWebServiceCompletedEventHandler(object sender, TestWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool TestWebServiceResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TestWebServiceResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void StartUploadCompletedEventHandler(object sender, StartUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool StartUploadResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool StartUploadResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadNextFragmentCompletedEventHandler(object sender, UploadNextFragmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadNextFragmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadNextFragmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool UploadNextFragmentResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool UploadNextFragmentResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CheckForActiveUploadsCompletedEventHandler(object sender, CheckForActiveUploadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckForActiveUploadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckForActiveUploadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckForActiveUploadsResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckForActiveUploadsResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CancelUploadCompletedEventHandler(object sender, CancelUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CancelUploadResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CancelUploadResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void FinishUploadCompletedEventHandler(object sender, FinishUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool FinishUploadResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool FinishUploadResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void TogglePackageCriticalStateCompletedEventHandler(object sender, TogglePackageCriticalStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TogglePackageCriticalStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TogglePackageCriticalStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool TogglePackageCriticalStateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TogglePackageCriticalStateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CheckForActiveDownloadsCompletedEventHandler(object sender, CheckForActiveDownloadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckForActiveDownloadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckForActiveDownloadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int CheckForActiveDownloadsResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckForActiveDownloadsResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CancelActiveDownloadsCompletedEventHandler(object sender, CancelActiveDownloadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelActiveDownloadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelActiveDownloadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CancelActiveDownloadsResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CancelActiveDownloadsResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void StartDownloadCompletedEventHandler(object sender, StartDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int StartDownloadResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool StartDownloadResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetNextFragmentCompletedEventHandler(object sender, GetNextFragmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextFragmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextFragmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Fragment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Fragment)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void FinishDownloadCompletedEventHandler(object sender, FinishDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool FinishDownloadResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool FinishDownloadResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPackageListCompletedEventHandler(object sender, GetPackageListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageDetails[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageDetails[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemovePackageCompletedEventHandler(object sender, RemovePackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool RemovePackageResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool RemovePackageResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591